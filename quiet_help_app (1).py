# -*- coding: utf-8 -*-
"""Quiet Help App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WpziAn69Fu-fA2z5jtpapnSHrmvK-mzv
"""

import smtplib
from email.mime.text import MIMEText
import os
from huggingface_hub import InferenceClient
import pyrebase
from google.colab import userdata

#        Emergency Page
def get_emergency_bio(service):
  mapping = {
        "Police": "Police",
        "Ambulance": "Ambulance",
        "Fire Department": "Fire Brigade",
        "ODPEM": "Office of Disaster Preparedness and Emergency Management"
   }

  bio = {"Police": "üöìPlease contact us regarding issues of a civil nature such as robbery, assault, etc.üëÆüèæ‚Äç‚ôÄÔ∏è Tel: 119",
              "Ambulance": "üöëPlease contact us in case of any and all health emergencies, regardleess of the severityüë©üèæ‚Äç‚öïÔ∏è Tel: 110",
              "Fire Brigade": "üöíPlease contact us in case of fire, hazards or if you are in need of rescueüë©üèæ‚Äçüöí Tel: 112",
              "Office of Disaster Preparedness and Emergency Management": "üè≥Please call us in the event of any and all disasters oüè≥  Tel: 1 (876) 906-9674 |  888-225-5637"
            }
  key = mapping.get(service)
  if key == "Office of Disaster Preparedness and Emergency Management":
      key = "Office of Disaster Preparedness and Emergency Management 1 (876) 906-9674 |  888-225-5637" #Added since the mapping for ODPEM was too large to be identified
  return bio.get(key, "There is no information currently available.")



# Send email alert
def send_message(name, location, service, message):
    sender = "jamiawilliamson24@gmail.com"            # Replace with Sender Gmail
    password = "adyf cmat rqfm ieml"            # Use Gmail App Password

    recipients = [
        "jammybammy22@gmail.com",             # Replace with emergency contact emails

    ]

    if not name or not location or not message:
        return "‚ö†Ô∏è Please fill out your name, location, and emergency message before sending."

    subject = f"üö® Emergency Alert: {service}"
    body = f"""
üö® EMERGENCY ALERT üö®
Service: {service}
Name: {name}
Location: {location}
Message: {message}
"""

    msg = MIMEText(body)
    msg["From"] = sender
    msg["To"] = ", ".join(recipients)
    msg["Subject"] = subject

    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender, password)
            server.sendmail(sender, recipients, msg.as_string())
        return f"‚úÖ Email alert sent successfully to {len(recipients)} contact(s)!"
    except Exception as e:
        return f"‚ùå Error sending email: {e}"

#       Chatbot Page

SYSTEM_INSTRUCTION = (
    "You are 'Dr. Rebecca,' a compassionate, professional, and empathetic AI therapist. "
    "Your primary role is to provide supportive, non-judgmental, and practical advice. "
    "Always focus on **active listening** and suggesting simple coping strategies. "
    "Encourage the user to seek professional human help for serious or immediate issues. "
    "Keep your responses kind, clear, and focused on helping the user feel heard."
)
def chatbot_response(message, history):
    """
    Generates a therapeutic response using the Llama model with the 'Dr. Rebecca' persona.
    The function expects the Hugging Face client to be initialized in the main block.
    """
    global hf_client
    HF_MODEL_ID = 'meta-llama/Llama-3.1-8B-Instruct'

    # 1. Check for immediate crisis for user safety
    low_message = message.lower()
    crisis_keywords = ["kill myself", "suicide", "ending it all", "immediate danger"]
    if any(k in low_message for k in crisis_keywords):
        bot_reply = (
            "üö® CRISIS ALERT: If you are in immediate danger, please stop typing and use the "
            "**'üö® Emergency Services'** tab right now. You are not alone, and help is available. "
            "We care about you."
        )
        history.append((message, bot_reply))
        return history


    # 2. Build the message list for the Hugging Face API

    # This API uses a list of messages. We include the System Instruction first.
    messages_for_hf = [
        {"role": "system", "content": SYSTEM_INSTRUCTION}
        ]

    # History in Gradio is a list of [user_message, model_response] pairs.
    # We need to reformat it for the API.
    for user_msg, model_msg in history:
        messages_for_hf.append({"role": "user", "content": user_msg})
        messages_for_hf.append({"role": "assistant", "content": model_msg})

    # Add the user's CURRENT message
    messages_for_hf.append({"role": "user", "content": message})


    # 3. Call the HF TOKEN (using a fast model)
    try:
        response = hf_client.chat_completion(
        model=HF_MODEL_ID,
        messages=messages_for_hf,
        #These settings ensure a quick, conversational response (How so?)
        temperature=0.7,
        max_tokens=256
        )

        #Extracting text (meaning the text response from the AI?)
        bot_reply = response.choices[0].message.content
        return bot_reply

    except Exception as e:
        print(f"Hugging Face API Error: {e}")
        # Fallback response if the API call fails
        return "I'm sorry, I'm having trouble connecting to my therapeutic network right now. Please check the 'Mental Health' tab for immediate human resources, or try again in a moment."


  # Load the API key
if 'HF_Token' not in os.environ:
  print("‚ö†Ô∏è Warning: HF_TOKEN not found in Colab secrets. Hardcoding for testing.")
hf_token = userdata.get("Hf_Token")

# Initialise the Hugging Face Client
try:
    hf_client = InferenceClient(token = hf_token)
    print("Hugging Face Client Initialised Successfully!")
except Exception as e:
    print(f"Error Initialising Hugging Face client: {e}")


# Define the Wrapper Function for the Gradio ChatInterface
def chatbot_wrapper(message, history):
    # Call the main function from block 2
    return chatbot_response(message, history)


#       Profile Page
# ----------------------------
# Firebase configuration
# ----------------------------
firebase_config = {
  "apiKey": "AIzaSyAxmXa5JLABe_UxNj05gSbQh42tMjDx9gU",
  "authDomain": "quiet-help.firebaseapp.com",
  "databaseURL":"https://quiet-help-default-rtdb.firebaseio.com",
  "projectId": "quiet-help",
  "storageBucket": "quiet-help.firebasestorage.app",
  "messagingSenderId": "653536284469",
  "appId": "1:653536284469:web:cd36ac19afb8d85c67467c",
}

firebase = pyrebase.initialize_app(firebase_config)
auth = firebase.auth()

# ----------------------------
# Login function
# ----------------------------
def login(email, password, logged_in_state):
    try:
        user = auth.sign_in_with_email_and_password(email, password)
        logged_in_state = True
        return gr.update(visible=False), gr.update(visible=True), "Login successful!", logged_in_state
    except:
        return gr.update(visible=True), gr.update(visible=False), "Invalid credentials", False

# ----------------------------
# Sign-up function
# ----------------------------
def sign_up(email, password):
    try:
        user = auth.create_user_with_email_and_password(email, password)
        return "Account created! You can now log in."
    except:
        return "Error: Email may already be in use or password is too weak."
def save_profile(name, age, location):
    return f"‚úÖ Profile saved!\nName: {name}\nAge: {age}\nLocation: {location}"

#UI/UX
#UI/UX

# --- CUSTOM HEADER BAR ---
header_html = """
<div style="
    display:flex;
    justify-content:center;
    align-items:center;
    flex-direction:column;
    margin-top:10px;
">
    <img src="quiethelp.png" alt="Quiet Help Logo"
         style="width:120px; height:auto; margin-bottom:10px;">
    <h1 style="
        font-family:'Arimo', sans-serif;
        font-weight:700;
        font-size:28px;
        color:#003366;
        margin:0;
    ">Quiet Help</h1>
</div>
"""


chatbot_css = """
@import url('https://fonts.googleapis.com/css2?family=Arimo:ital,wght@0,400..700;1,400..700&family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap');

/* Change the font */
body, .gradio-container, .gr-block, .gradio-tabs, .gradio-tabs-nav, .gradio-markdown {
    font-family: 'Playfair Display', serif !important;
    font-optical-sizing: auto;
    line-height: 1.6 !important;
    color: #111 !important; /* Adjust for readability */
}

/* Headings */
.gradio-markdown h1, .gradio-markdown h2, .gradio-markdown h3, .gradio-markdown h4, .gradio-markdown h5, .gradio-markdown h6  {
    font-weight: 600 !important;
    font-size: 24px !important;
    color: #003366 !important;
}

/* Buttons */
button, .gradio-button {
    font-weight: bold !important;
    font-size: 16px !important;
}

/* The main Gradio container is called 'gradio-container' */
.gradio-container {
    max-width: 700px !important; /* Make the chat window a nice size */
    margin: 40px auto !important; /* Center it on the page */
    border-radius: 20px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    background-color: #2b7fff !important; /* Light blue background for the whole app */
    color: black !important;
}

/* The main content area of the tab (what's INSIDE the tab) */
.gradio-tabs {
    /* Set the inside of the tabs to white */
    background-color: #f8f8f8 !important;
    border-radius: 10px;
}

/* The bar/header that holds the 'Chat' and 'Settings' buttons */
.gradio-tabs-nav {
    /* Set the tab bar to a light color */
    background-color: #000000 !important; /* Black */
    padding: 5px 10px;
    color: black !important;
    border-radius: 10px 10px 0 0; /* Only round the top corners */
    border-bottom: 1px solid #ddd;
}

/* Style the individual tab buttons for a clean look */
.gradio-tabs-nav button {
    background-color: #e8f5e9 !important;
    color: black !important;
    padding: 5px 10px;
    border-radius: 10px 10px 0 0; /* Only round the top corners */
    border-bottom: 1px solid #ddd;
}

/* Highlight the currently selected tab (e.g., a pure white background) */
.gradio-tabs-nav button.selected {
    background-color: white !important;
    font-weight: bold;
    color: #007bff !important; /* Match your main blue color */
    padding: 5px 10px;
    border-radius: 10px 10px 0 0; /* Only round the top corners */
    border-bottom: 1px solid #ddd;
}

/* Style the actual chat message box itself (where the conversation is) */
.gradio-container .gr-chatbot {
    border-radius: 15px;
    background-color: white;
    min-height: 500px;
    padding: 10px;
}

/* Style the outgoing (user) messages to look like chat bubbles */
.gradio-container .message-wrap.svelte-10pgy7r.message-wrap-out {
    background-color: #1a73e8; /* A nice blue color */
    color: black;
    border-radius: 18px 18px 0 18px; /* Rounded corners with a sharp edge at the bottom-left */
    padding: 10px 15px;
    max-width: 70%;
    margin-left: auto; /* Push to the right */
    margin-bottom: 8px;

}

/* Style the incoming (bot) messages */
.gradio-container .message-wrap.svelte-10pgy7r.message-wrap-in {
    background-color: #0C0A09; /* for the bot */
    color: #333;
    border-radius: 18px 18px 18px 0; /* Rounded corners with a sharp edge at the bottom-right */
    padding: 10px 15px;
    max-width: 70%;
    margin-right: auto; /* Keep it on the left */
    margin-bottom: 8px;
}

/* Remove the default border/shadow on the message components for a cleaner look */
.gradio-container .message-wrap.svelte-10pgy7r {
    border: none !important;
    box-shadow: none !important;
}

/* Style the input box (where you type your message) */
.gradio-container .gradio-textbox {
    padding: 15px;
    background-color: white; /* Match your app background */
    border-top: 1px solid #ddd;
}

/* --- QuietHelp Header --- */
#root > div:first-child img {
    display:block;
    margin:0 auto;
}

/* --- Bottom Tabs Styling --- */
.gradio-tabs {
    border-radius: 12px;
}

.gradio-tabs-nav {
    display: flex !important;
    justify-content: space-around !important;
    background: linear-gradient(to right, #2b7fff, #9c9cff) !important;
    border-radius: 15px;
    padding: 8px;
}

.gradio-tabs-nav button {
    border: none !important;
    background: rgba(255,255,255,0.9) !important;
    border-radius: 50% !important;
    padding: 12px !important;
    width: 60px;
    height: 60px;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    font-size: 22px !important;
    transition: transform 0.2s ease;
}

.gradio-tabs-nav button.selected {
    background: white !important;
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

"""

"chatbot_css =" """
/* The main Gradio container is called 'gradio-container' */
.gradio-container {
    max-width: 700px !important; /* Make the chat window a nice size */
    margin: 40px auto !important; /* Center it on the page */
    border-radius: 20px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    background-color: #2b7fff !important; /* Light blue background for the whole app */
}

/* The main content area of the tab (what's INSIDE the tab) */
.gradio-tabs {
    /* Set the inside of the tabs to white */
    background-color: #f8f8f8 !important;
    border-radius: 10px;
}

/* The bar/header that holds the 'Chat' and 'Settings' buttons */
.gradio-tabs-nav {
    /* Set the tab bar to a light color */
    background-color: #F8F8F8 !important; /* A very light gray */
    padding: 5px 10px;
    border-radius: 10px 10px 0 0; /* Only round the top corners */
    border-bottom: 1px solid #ddd;
}

/* Style the individual tab buttons for a clean look */
.gradio-tabs-nav button {
    background-color: #e8f5e9 !important;
    color: black !important;
    padding: 5px 10px;
    border-radius: 10px 10px 0 0; /* Only round the top corners */
    border-bottom: 1px solid #ddd;
}

/* Highlight the currently selected tab (e.g., a pure white background) */
.gradio-tabs-nav button.selected {
    background-color: white !important;
    font-weight: bold;
    color: #007bff !important; /* Match your main blue color */
    padding: 5px 10px;
    border-radius: 10px 10px 0 0; /* Only round the top corners */
    border-bottom: 1px solid #ddd;
}

/* Style the actual chat message box itself (where the conversation is) */
.gradio-container .gr-chatbot {
    border-radius: 15px;
    background-color: white;
    min-height: 500px;
    padding: 10px;
}

/* Style the outgoing (user) messages to look like chat bubbles */
.gradio-container .message-wrap.svelte-10pgy7r.message-wrap-out {
    background-color: #1a73e8; /* A nice blue color */
    color: white;
    border-radius: 18px 18px 0 18px; /* Rounded corners with a sharp edge at the bottom-left */
    padding: 10px 15px;
    max-width: 70%;
    margin-left: auto; /* Push to the right */
    margin-bottom: 8px;

}

/* Style the incoming (bot) messages */
.gradio-container .message-wrap.svelte-10pgy7r.message-wrap-in {
    background-color: #e0e0e0; /* A light grey for the bot */
    color: #333;
    border-radius: 18px 18px 18px 0; /* Rounded corners with a sharp edge at the bottom-right */
    padding: 10px 15px;
    max-width: 70%;
    margin-right: auto; /* Keep it on the left */
    margin-bottom: 8px;
}

/* Remove the default border/shadow on the message components for a cleaner look */
.gradio-container .message-wrap.svelte-10pgy7r {
    border: none !important;
    box-shadow: none !important;
}

/* Style the input box (where you type your message) */
.gradio-container .gradio-textbox {
    padding: 15px;
    background-color: white; /* Match your app background */
    border-top: 1px solid #ddd;
}
"""

#       Combine everything into Tabs

import gradio as gr

with gr.Blocks(title="QuietHelp - For Emergency & Mental Health Assistance",
               css=chatbot_css, mode='light') as app:
    gr.Markdown("# üîçQuietHelp - For Emergency & Mental Health Assistance")
    gr.Markdown("## Helping users reach the right support instantly and safely!")

    with gr.Tab("üö® Emergency Services"):
        gr.Markdown("### Contact Emergency Services")

        name = gr.Textbox(label="Your Name")
        location = gr.Textbox(label="Your Location")
        service = gr.Dropdown(
            ["Police", "Ambulance", "Fire Department", "ODPEM"],
            label="Select Emergency Contact",
            value=""
        )
        service_info_output = gr.Markdown()
        service.change(get_emergency_bio, inputs=service, outputs=service_info_output)

        message = gr.Textbox(label="Describe your emergency", lines=3)
        send_btn = gr.Button("üö® SEND SOS ALERTüö®", variant="stop")
        send_output = gr.Textbox(label="Status", interactive = False)
        send_btn.click(send_message, inputs=[name, location, service, message], outputs=send_output)


    with gr.Tab("üß† Mental Health"):
        gr.Markdown("## üß† Mental Health Support")

        with gr.Row():
          with gr.Column():
              gr.Markdown("### Resourcesü§ç")
              with gr.Accordion("Mental Health and Suicide Prevention Helpline: (888) 639-5433", open = False):
                gr.Markdown("Jamaica's Mental Health and Suicide Prevention Helpline provides 24/7 free and confidential support and information by phone. We help everyone in Jamaica. Our free support is provided for all mental health issues, whether you're in crisis or just need someone to talk to. You can contact us about anything that you're going through.")

              with gr.Accordion("SafeSpot: 876-439-5199 | 888-723-3776", open = False):
                gr.Markdown("SafeSpot is Jamaica‚Äôs national child and teen helpline operated by the Office of the Children‚Äôs Advocate in partnership with UNICEF and PSOJ. It is a free, 24/7 service that provides immediate, remote and confidential psychosocial support services to children and teens under 18 years old via a toll-free landline, WhatsApp,web chat , BiP ( for Digicel users) as well as by direct messaging on Instagram and Snapchat.")

              with gr.Accordion("U-Matter: 876-838-4897", open = False):
                gr.Markdown("The U-Matter counselling service is a messaging-based chatline in partnership between the Ministry of Health and Wellness, the United Nations Children‚Äôs Fund (UNICEF) and the Caribbean Child Development Centre (CCDC) at The University of the West Indies (UWI) Open Campus. The service is provided by professionals from the field of counselling and psychology who were selected as volunteers under a competitive and rigorous process.U-Matter provides counselling and psychosocial support. Volunteers are supervised by licensed counselling psychologists.The service operates on the platform of UNICEF‚Äôs U-Report social messaging service for youth. U-Report provides a space for Jamaicans aged 13-24 years old to access U-Matter to send and receive written messages via WhatsApp, SMS, Instagram and Facebook Messenger.")

              with gr.Accordion("Woman Inc: (876) 929-9038 (Kingston) | (876) 952-9533 (Montego Bay) | (876) 929-2997 (Hotline)", open = False):
                gr.Markdown("Woman Inc. is a voluntary, non-profit, non-governmental organisation [NGO], founded in 1984. Our work is inspired by the creative energies of women and allies from all walks of life that are dedicated to providing assistance to victims of rape, incest, domestic crisis, sexual harassment at the workplace, human trafficking, and domestic violence.")

              with gr.Accordion("Jamaica Coalition Against Domestic Violence: 1800 598 7607", open = False):
                gr.Markdown("Jamaica Coalition against Domestic Violence is calling for a united approach to accelerated and collective action to address the drivers of violence against women and girls in order to achieve a Caribbean free of Gender Based Violence. \n #SpotlightEndViolence")

              with gr.Accordion("Equality For All Foundation: (876) 667-6202", open = False):
                gr.Markdown("Equality For All Foundation Ltd. (EFAF) is a human rights and social justice organisation that advocates for the rights, livelihood, and well-being of lesbian, gay, bisexual, and transgender (LGBT) people in Jamaica.")

          with gr.Column():
              gr.Markdown("### üåø Self-Care Tips")
              gr.Markdown("""
  - ‚òÄÔ∏è **Get closer to nature** ‚Äî sunlight and nature can lift your mood.
  - üèäüèæ‚Äç‚ôÄÔ∏è **Keep moving** ‚Äî movement alleviates stress by keeping you focused on that action.
  - üí¨ **Keep in touch** ‚Äî sharing how you feel helps.
  - üìÖ **Plan something to look forward to** ‚Äî having a set goal makes achieving it all the more worthwhile.
  - üßòüèæ‚Äç‚ôÄÔ∏è **Meditation and breathwork** ‚Äî focusing on your breathing helps t keep you calm.
  - ‚úçüèæ **Reframe negative emotions** ‚Äî it helps process your feelings and puts them in perspective.
  - üé∂ **Listen to uplifting music** or do a creative activity you enjoy.
  """)

    with gr.Tab("üí¨ Chatbot"):
      gr.Markdown("## Talk to the QuietHelp AI")

      chat = gr.ChatInterface(
          fn=chatbot_response,  # must return a string
          submit_btn="Send",
          title="QuietHelp AI",
          examples=["hello", "I'm feeling sad", "I need someone to talk to"]
      )


    with gr.Tab("üë§ Profile"):
        # Track login state
        logged_in_state = gr.State(False)

        # Login / Sign-Up section
        with gr.Column(visible=True) as auth_section:
            email = gr.Textbox(label="Email")
            password = gr.Textbox(label="Password", type="password")
            login_status = gr.Textbox(label="Status", interactive=False)
            login_btn = gr.Button("Log In")
            signup_btn = gr.Button("Sign Up")

        # Profile section (hidden initially)
        with gr.Column(visible=False) as profile_section:
            name = gr.Textbox(label="Name")
            age = gr.Number(label="Age")
            location = gr.Textbox(label="Location")
            profile_output = gr.Textbox(label="Status", interactive=False)
            save_btn = gr.Button("Save Profile")
            logout_btn = gr.Button("Log Out")

            save_btn.click(save_profile, inputs=[name, age, location], outputs=profile_output)


        # Button actions
        login_btn.click(
            login,
            inputs=[email, password, logged_in_state],
            outputs=[auth_section, profile_section, login_status, logged_in_state]
        )

        signup_btn.click(
            sign_up,
            inputs=[email, password],
            outputs=[login_status]
        )
        # Logout action
    def logout(_):
        return (
            gr.update(visible=True),     # Show login/signup
            gr.update(visible=False),    # Hide profile
            "",                          # Clear login_status
            False,                       # Reset logged_in_state
            "",                          # Clear email
            ""                           # Clear password
        )

    logout_btn.click(
        logout,
        inputs=[logged_in_state],
        outputs=[auth_section, profile_section, login_status, logged_in_state]
    )

app.launch(share = True)
